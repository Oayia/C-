#include <iostream>
using namespace std;

int main16() {
	int a = 10;
	//1、指针定义语法：数据类型 * 变量名
	int* p = &a;
	cout << a << endl;

	//2、使用指针，可通过解引用的方式来找到指针指向的内存
	//指针前加*代表解引用，找到指针指向的内存的数据
	cout << *p << endl; 
	*p = 200;
	cout << "修改后：" << a << endl;
	cout << "修改后：" << *p << endl;

	//3、指针也是种数据类型，占4个字节（32位操作系统编程的情况下），占8个字节（64位操作系统编程的情况下）
	cout << sizeof(int *) << endl;
	cout << sizeof(p) << endl;

	//4、空指针：指针变量指向内存中编号为0的空间
	//用途：初始化指针变量
	//★注意：空指针指向的内存是不可以访问的
	int* p1 = NULL;
	cout << p1 << endl;
	//*p1 = 300; //0-255之间的内存编号是系统占用的，因此不可以访问
	
	//5、野指针：指针变量指向非法的内存空间
	int* p2 = (int*)0x1100;  //未经申请是没权限操作的
	//cout << *p2 << endl;

	/*6、const修饰指针
	*	1、const修饰指针――常量指针
	*	2、const修饰常量――指针常量
	*	3、const既修饰指针又修饰常量
	*/
	int b = 2;
	const int* p3 = &a; //1、常量指针，指针的指向可以修改，但指针指向的值不可以修改
	p3 = &b;
	//*p3 = 20; 直接编译就错
	int* const p4 = &a; //2、指针常量，指针的指向不可以改，指针指向的值可以改
	*p = 90;
	cout << *p << endl;
	//p4 = &b;
	const int* const p5 = &a; //3、既修饰指针又修饰常量，二者都不可以改

	return 0;
}